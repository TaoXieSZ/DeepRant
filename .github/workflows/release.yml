name: 'Release'

on:
  push:
    branches:
      - release

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macOS ARM64'
            target_dir: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            name: 'macOS Intel'
            target_dir: 'release'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'
            target_dir: 'release'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          npm install

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          npm install

      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $json = Get-Content 'src-tauri/tauri.conf.json' | ConvertFrom-Json
          $version = $json.version
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: v${{ steps.get_version.outputs.version }}
          releaseName: 'DeepRant v${{ steps.get_version.outputs.version }}'
          releaseBody: |
            请查看附件下载对应系统的安装包：
            - Windows: .msi 安装包
            - macOS Intel: .dmg (x64) 安装包
            - macOS Apple Silicon: .dmg (arm64) 安装包
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          tauriScript: 'npm run tauri'

      - name: Generate update manifest (Windows)
        if: matrix.platform == 'windows-latest'
        id: generate_manifest_windows
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          "version=$version" >> $env:GITHUB_OUTPUT

          $manifest = @{
            version = $version
            notes = "自动生成更新包"
            platforms = @{
              "windows-x86_64" = @{
                url = "https://github.com/liseami/DeepRant/releases/download/v${version}/DeepRant_${version}_x64_zh-CN.msi"
              }
            }
          }

          $manifest | ConvertTo-Json -Depth 10 | Set-Content -Path latest.json -Encoding UTF8

      - name: Generate update manifest (macOS)
        if: matrix.platform == 'macos-latest'
        id: generate_manifest_macos
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
            SIG_PATH="src-tauri/target/aarch64-apple-darwin/release/bundle/macos/DeepRant.app.tar.gz.sig"
            if [ -f "$SIG_PATH" ]; then
              echo '{
                "version": "'$VERSION'",
                "notes": "自动生成更新包",
                "platforms": {
                  "darwin-aarch64": {
                    "signature": "'$(cat $SIG_PATH)'",
                    "url": "https://github.com/liseami/DeepRant/releases/download/v'$VERSION'/DeepRant_aarch64.app.tar.gz"
                  }
                }
              }' > latest.json
            else
              echo "找不到签名文件: $SIG_PATH"
              exit 1
            fi
          else
            SIG_PATH="src-tauri/target/release/bundle/macos/DeepRant.app.tar.gz.sig"
            if [ -f "$SIG_PATH" ]; then
              echo '{
                "version": "'$VERSION'",
                "notes": "自动生成更新包",
                "platforms": {
                  "darwin-x86_64": {
                    "signature": "'$(cat $SIG_PATH)'",
                    "url": "https://github.com/liseami/DeepRant/releases/download/v'$VERSION'/DeepRant.app.tar.gz"
                  }
                }
              }' > latest.json
            else
              echo "找不到签名文件: $SIG_PATH"
              exit 1
            fi
          fi

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            src-tauri/target/${{ matrix.target_dir }}/bundle/macos/DeepRant.app.tar.gz
            src-tauri/target/${{ matrix.target_dir }}/bundle/dmg/DeepRant_*.dmg
            src-tauri/target/${{ matrix.target_dir }}/bundle/msi/DeepRant_*.msi
            latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 15
        continue-on-error: true

      - name: Retry Upload if Failed
        if: failure()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            src-tauri/target/${{ matrix.target_dir }}/bundle/macos/DeepRant.app.tar.gz
            src-tauri/target/${{ matrix.target_dir }}/bundle/dmg/DeepRant_*.dmg
            src-tauri/target/${{ matrix.target_dir }}/bundle/msi/DeepRant_*.msi
            latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 20
